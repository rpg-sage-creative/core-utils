
// #region helper converters to specific color value types

// /** Converts any given values to Hex with alpha */
// function toHexa(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): string {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.hexa || null;
// }

// /** Converts any given values to Hex without alpha */
// function toHex(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): string {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.hex || null;
// }

// /** Converts any given values to long number color value */
// function toInt(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): number {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.int || null;
// }

// /** Converts any given values to a known color name */
// function toName(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): string {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.name || null;
// }

// /** Converts any given values to RGB color without alpha */
// function toRgb(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): string {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.rgb || null;
// }

// /** Converts any given values to RGBA color (with alpha) */
// function toRgba(colorOrRed: string | number, alphaOrGreen: number, blue: number, alpha: number): string {
// 	const color = toColorCore(colorOrRed as number, alphaOrGreen, blue, alpha);
// 	return color && color.rgba || null;
// }

// #endregion
